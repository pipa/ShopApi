package main

import (
	"crypto/tls"
	"encoding/json"
	"fmt"
	"log"
	"net/http"

	"ShopAPI/shopapi/config"
	"ShopAPI/shopapi/dao"
	"ShopAPI/shopapi/models"

	"github.com/gorilla/handlers"
	"github.com/gorilla/mux"
	"github.com/sendgrid/sendgrid-go"
	"github.com/sendgrid/sendgrid-go/helpers/mail"
	"gopkg.in/mgo.v2/bson"
	"golang.org/x/crypto/acme/autocert"
)

var Config = config.Config{}
var DAO = dao.ProductsDao{}
var CategortDAO = dao.CategoryDao{}

func AllProductsEndPoint(w http.ResponseWriter, r *http.Request) {
	products, err := DAO.FindAll()
	if err != nil {
		respondWithError(w, http.StatusInternalServerError, err.Error())
		return
	}
	respondWithJson(w, http.StatusOK, products)
}

func FindProductEndpoint(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	product, err := DAO.FindById(params["id"])
	if err != nil {
		respondWithError(w, http.StatusBadRequest, "Invalid Product ID")
		return
	}
	respondWithJson(w, http.StatusOK, product)
}

func FindProductWordEndpoint(w http.ResponseWriter, r *http.Request) {
	defer r.Body.Close()
	var productFilter models.Product
	if err := json.NewDecoder(r.Body).Decode(&productFilter); err != nil {
		respondWithError(w, http.StatusBadRequest, "Invalid request payload")
		return
	}

	product, err := DAO.FindByWord(productFilter)
	if err != nil {
		respondWithError(w, http.StatusBadRequest, "Invalid Product ID")
		return
	}
	respondWithJson(w, http.StatusOK, product)
}

func AllCompanyProductsEndPoint(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintln(w, "not implemented yet !")
}

func CreateProductEndPoint(w http.ResponseWriter, r *http.Request) {
	defer r.Body.Close()
	var product models.Product
	if err := json.NewDecoder(r.Body).Decode(&product); err != nil {
		respondWithError(w, http.StatusBadRequest, "Invalid request payload")
		return
	}
	product.ID = bson.NewObjectId()
	if err := DAO.Insert(product); err != nil {
		respondWithError(w, http.StatusInternalServerError, err.Error())
		return
	}
	respondWithJson(w, http.StatusCreated, product)
}

func CreateCategoryEndPoint(w http.ResponseWriter, r *http.Request) {
	defer r.Body.Close()
	var category models.Category
	if err := json.NewDecoder(r.Body).Decode(&category); err != nil {
		respondWithError(w, http.StatusBadRequest, "Invalid request payload")
		return
	}
	category.ID = bson.NewObjectId()
	log.Println(category)
	if err := CategortDAO.Insert(category); err != nil {
		respondWithError(w, http.StatusInternalServerError, err.Error())
		return
	}
	respondWithJson(w, http.StatusCreated, category)
}

func respondWithError(w http.ResponseWriter, code int, msg string) {
	respondWithJson(w, code, map[string]string{"error": msg})
}

func respondWithJson(w http.ResponseWriter, code int, payload interface{}) {
	response, _ := json.Marshal(payload)
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(code)
	w.Write(response)
}

func sendMail(w http.ResponseWriter, r *http.Request) {
	var email models.Mail

	if err := json.NewDecoder(r.Body).Decode(&email); err != nil {
		respondWithError(w, http.StatusBadRequest, "Invalid request payload")
		return
	}
	//log.Println(email)
	from := mail.NewEmail("Jose Gale", "josedavidgale@gmail.com")
	subject := email.Subject
	to := mail.NewEmail(email.To.Name, email.To.UserMail)
	plainTextContent := email.PlainTextContent
	htmlContent := email.HtmlContent
	message := mail.NewSingleEmail(from, subject, to, plainTextContent, htmlContent)
	client := sendgrid.NewSendClient("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")
	response, err := client.Send(message)
	if err != nil {
		log.Println(err)
	} else {

		respondWithJson(w, response.StatusCode, "Email ")
		// fmt.Println(response.StatusCode)
		// fmt.Println(response.Body)
		// fmt.Println(response.Headers)
	}
}

// Parse the configuration file 'config.toml', and establish a connection to DB
func init() {
	Config.Read()

	DAO.Server = Config.Server
	DAO.Database = Config.Database
	DAO.Connect()

	CategortDAO.Server = Config.Server
	CategortDAO.Database = Config.Database
	CategortDAO.Connect()
}

func main() {
//	certManager := autocert.Manager{
//        	Prompt:     autocert.AcceptTOS,
//        	HostPolicy: autocert.HostWhitelist("shopapi.xn--elgreas-8za.com"), //Your domain here
//        	Cache:      autocert.DirCache("certs"),                   //Folder for storing certificates
//    	}

	allowedHeaders := handlers.AllowedHeaders([]string{"X-Requested-With"})
	allowedOrigins := handlers.AllowedOrigins([]string{"*"})
	allowedMethods := handlers.AllowedMethods([]string{"GET", "HEAD", "POST", "PUT", "DELETE", "OPTIONS"})

	r := mux.NewRouter()
	r.HandleFunc("/products", AllProductsEndPoint).Methods("GET")
	r.HandleFunc("/products", CreateProductEndPoint).Methods("POST")
	r.HandleFunc("/products/{id}", FindProductEndpoint).Methods("GET")
	r.HandleFunc("/products/where", FindProductWordEndpoint).Methods("POST")
	r.HandleFunc("/sendMail", sendMail).Methods("POST")
	r.HandleFunc("/categories", CreateCategoryEndPoint).Methods("POST")

	const https = require('https')

  // 	server := &http.Server{
//		Addr: ":443",
//		TLSConfig: &tls.Config{
//			GetCertificate: certManager.GetCertificate,
//		},
//	}

//	go http.ListenAndServe(":3000", handlers.CORS(allowedHeaders, allowedOrigins, allowedMethods)(r))

  	log.Fatal(server.ListenAndServeTLS("","")) //Key and cert are coming from Let's Encrypt
}
